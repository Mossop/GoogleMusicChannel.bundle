# Copyright 2016 Dave Townsend
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import logging

from library import LibraryTrack
from album import LibraryAlbum
import music

logger = logging.getLogger("googlemusicchannel.service.url")


def MetadataObjectForURL(url):
    logger.debug("Requested metadata for %s" % url)

    item = music.get_item_for_url(url)

    if isinstance(item, LibraryTrack):
        return MetadataObjectForLibraryTrack(item)

    raise Exception("Unknown object type for url '%s' %s" % (url, repr(item)))


def MediaObjectsForURL(url):
    logger.debug("Requested media objects for %s" % url)

    item = music.get_item_for_url(url)

    if isinstance(item, LibraryTrack):
        return MediaObjectsForLibraryTrack(item)

    raise Exception("Unknown object type for url '%s' %s" % (url, repr(item)))


def MetadataObjectForLibraryTrack(track):
    return TrackObject(
        title=track.title,
        artist=track.album.artist.name,
        album=track.album.name,
        duration=track.duration,
        url=track.url
    )


def MediaObjectsForLibraryTrack(track):
    return [
        MediaObject(
            bitrate=320,
            container=Container.MP3,
            audio_codec=AudioCodec.MP3,
            duration=track.duration,
            parts=[PartObject(
                key=Callback(LibraryTrackStream, libraryId=track.library.id,
                             trackId=track.id, quality="hi"),
                duration=track.duration,
                streams=[
                    AudioStreamObject(
                        selected=1,
                        bitrate=320,
                        codec=AudioCodec.MP3,
                        duration=track.duration
                    )
                ]
            )]
        )
    ]


def LibraryTrackStream(libraryId, trackId, quality):
    logger.debug("Attempt to stream")
    library=music.get_library(libraryId)
    track=library.get_track(trackId)

    return Redirect(track.get_stream_url(quality))
