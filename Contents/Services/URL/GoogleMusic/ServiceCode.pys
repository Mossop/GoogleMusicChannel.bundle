# Copyright 2016 Dave Townsend
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import logging

from track import Track
import music

logger = logging.getLogger("googlemusicchannel.service.url")


def MetadataObjectForURL(url):
    logger.debug("Requested metadata for %s" % url)

    (library, item) = music.get_item_for_url(url)

    if isinstance(item, Track):
        return MetadataObjectForTrack(library, item)

    raise Exception("Unknown object type for url '%s' %s" % (url, repr(item)))


def MediaObjectsForURL(url):
    logger.debug("Requested media objects for %s" % url)

    (library, item) = music.get_item_for_url(url)

    if isinstance(item, Track):
        return MediaObjectsForTrack(library, item)

    raise Exception("Unknown object type for url '%s' %s" % (url, repr(item)))


def MetadataObjectForTrack(library, track):
    return TrackObject(
        title=track.title,
        artist=track.album.artist.name,
        album=track.album.name,
        duration=track.duration,
        url=track.get_url(library),
        thumb=url_or_default(track.thumb, R("track.png"))
    )


def MediaObjectsForTrack(library, track):
    return [
        MediaObject(
            container=Container.MP3,
            audio_codec=AudioCodec.MP3,
            audio_channels=2,
            duration=track.duration,
            parts=[PartObject(
                key=Callback(
                    LibraryTrackStream,
                    libraryId=library.id,
                    trackId=track.id,
                    quality="hi"
                )
            )]
        )
    ]


@indirect
def LibraryTrackStream(libraryId, trackId, quality, **kwargs):
    library = music.get_library(libraryId)
    client = library.get_stream_client()
    url = client.get_stream_url(trackId, None, quality)
    client.logout()
    return IndirectResponse(TrackObject, url)
