# Copyright 2016 Dave Townsend
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import re
import logging
from urlparse import urlsplit, parse_qs

import music

logger = logging.getLogger("googlemusicchannel.service.url")

base_path = 'https://play.google.com/music/m/'

def get_item_for_url(url):
    if url[0:len(base_path)] != base_path:
        logger.warn("Failed to match url '%s'" % url)
        return None, None

    parts = urlsplit(url[len(base_path):])
    id = parts.path
    args = parse_qs(parts.query)

    if "u" in args:
        lid = int(args["u"][0])
    else:
        lid = 0

    library = music.get_library(lid)
    if library is None:
        logger.warn("Couldn't find a library for id '%d'" % lid)
        return None, None
    item = library.get_item(id)
    if item is None:
        logger.warn("Couldn't find an object for id '%s'" % id)

    return (library, item)

def MetadataObjectForURL(url):
    logger.debug("Requested metadata for %s" % url)

    (library, item) = get_item_for_url(url)
    if item is None:
        return None

    if isinstance(item, music.Album):
        return MetadataObjectForAlbum(library, item)
    if isinstance(item, music.Artist):
        return MetadataObjectForArtist(item)
    if isinstance(item, music.Track):
        return MetadataObjectForTrack(item)

    logger.warn("Unknown object type for id '%s'" % id)
    return None

def MediaObjectsForURL(url):
    logger.debug("Requested media objects for %s" % url)
    try:

        (library, item) = get_item_for_url(url)
        if item is None:
            return None

        if isinstance(item, music.Album):
            return MediaObjectsForAlbum(item)
        if isinstance(item, music.Artist):
            return MediaObjectsForArtist(item)
        if isinstance(item, music.Track):
            return MediaObjectsForTrack(library, item)

        logger.warn("Unknown object type for id '%s'" % id)
        return []
    except:
        logger.exception("Failed")
        return []

def MetadataObjectForAlbum(library, album):
    return AlbumObject(
        key = Callback(Tracks, libraryId = library.id, albumId = album.id),
        title = album.name,
        art = album.thumb,
        thumb = album.thumb,
        artist = album.artist.name,
        track_count = len(album.tracks)
    )

def MetadataObjectForTrack(track):
    return TrackObject(
        title = track.title,
        artist = track.album.artist.name,
        album = track.album.name,
        duration = track.duration,
        thumb = track.thumb,
        url = track.url
    )

def MediaObjectsForAlbum(album):
    return None

def MediaObjectsForTrack(library, track):
    return [
        MediaObject(
            container = Container.MP3,
            audio_codec = AudioCodec.MP3,
            duration = track.duration,
            parts = [PartObject(
                key = Callback(TrackStream, trackId = track.id, libraryId = library.id, quality = "hi"),
                duration = track.duration,
                streams = [
                    AudioStreamObject(
                        selected = 1,
                        codec = AudioCodec.MP3,
                        duration = track.duration
                    )
                ]
            )]
        )
    ]

def Tracks(albumId):
    album = music.get_album(albumId)

    oc = ObjectContainer()

    for track in sorted(album.tracks, music.track_cmp):
        oc.add(MetadataObjectForTrack(track))

    return oc


def TrackStream(libraryId, trackId, quality):
    logger.debug("Attempt to stream %s %d" % (libraryId, trackId))
    track = music.get_library(libraryId).get_track(trackId)

    return Redirect(track.get_stream_url(quality))
